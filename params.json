{"tagline":"The PHP Binding for LevelDB","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"PHP-LevelDB","body":"# PHP-LevelDB: The PHP Binding for LevelDB\r\n[![Build Status](https://secure.travis-ci.org/reeze/php-leveldb.png)](http://travis-ci.org/reeze/php-leveldb)\r\n\r\n## Requirements\r\n- PHP >= 5.2\r\n- LevelDB\r\n\r\nYou could get leveldb from: <http://code.google.com/p/leveldb/>\r\n\r\n\t$ wget http://leveldb.googlecode.com/files/leveldb-1.5.0.tar.gz\r\n\t$ tar zxvf leveldb-1.5.0.tar.gz\r\n\t$ cd leveldb-1.5.0\r\n\t$ make\r\n\r\n>**NOTE** LevelDB didn't have make install target in Makefile:\r\n><http://code.google.com/p/leveldb/issues/detail?id=27>，\r\n>If you want to install to a specific dir, you could:\r\n>`make INSTALL_PATH=/Your/Path/`\r\n\r\n## Installation\r\n\r\n\t$ git clone https://github.com/reeze/php-leveldb.git\r\n\t$ cd php-leveldb\r\n\t$ phpize\r\n\t$ ./configure --with-leveldb=/path/to/your/leveldb-1.*.*\r\n\t$ make\r\n\t$ make install\r\n\r\n1. Install from PECL\r\n\r\n\tPHP-LevelDB havn't been hosted in PECL Yet\r\n\r\n## Usage\r\nSince PHP-LevelDB is a binding for LevelDB, most of the interface are the same as\r\nLevelDB document: <http://leveldb.googlecode.com/git/doc/index.html>\r\n\r\n### Open options\r\nWhen open a leveldb database you could specify options to override default value:\r\n\r\n````php\r\n<?php\r\n/* default open options */\r\n$options = array(\r\n\t'create_if_missing' => true,\t// if the specified database didn't exist will create a new one\r\n\t'error_if_exists'\t=> false,\t// if the opened database exsits will throw exception\r\n\t'paranoid_checks'\t=> false,\r\n\t'block_cache_size'\t=> 8 * (2 << 20),\r\n\t'write_buffer_size' => 4<<20,\r\n\t'block_size'\t\t=> 4096,\r\n\t'max_open_files'\t=> 1000,\r\n\t'block_restart_interval' => 16,\r\n\t'compression'\t\t=> LEVELDB_SNAPPY_COMPRESSION,\r\n\t'comparator'\t\t=> NULL,   // any callable parameter return 0, -1, 1\r\n);\r\n/* default readoptions */\r\n$readoptions = array(\r\n\t'verify_check_sum'\t=> false,\r\n\t'fill_cache'\t\t=> true,\r\n);\r\n\r\n/* default write options */\r\n$writeoptions = array(\r\n\t'sync' => false\r\n);\r\n\r\n$db = new LevelDB(\"/path/to/db\", $options, $readoptions, $writeoptions);\r\n````\r\n\r\n>**NOTE** The readoptions and writeoptions will take effect when operate on\r\n>db afterward, but you could override it by specify read/write options when\r\n>accessing\r\n\r\n### Using custom comparator\r\nYou could write your own comparator, the comparator can be anything callale in php\r\nit the same as usort()'s compare function: <http://php.net/usort>, and the comparator\r\ncould be:\r\n\r\n````php\r\n<?php\r\nint callback(string $a, string $b );\r\n$db = new LevelDB(\"/path/to/db\", array('comparator' => 'cmp'));\r\nfunction cmp($a, $b)\r\n{\r\n\treturn strcmp($a, $b);\r\n}\r\n````\r\n\r\n>**NOTE**\r\n>If you create a database with custom comparator, you can only open it again\r\n>with the same comparator.\r\n\r\n### Basic operations: get(), put(), delete()\r\nLevelDB is a key-value database, you could do those basic operations on it:\r\n\r\n````php\r\n<?php\r\n\r\n$db = new LevelDB(\"/path/to/leveldb-test-db\");\r\n\r\n/*\r\n * Basic operate methods: set(), get(), delete()\r\n */\r\n$db->put(\"Key\", \"Value\");\r\n$db->set(\"Key2\", \"Value2\"); // set() is an alias of put()\r\n$db->get(\"Key\");\r\n$db->delete(\"Key\");\r\n````\r\n\r\n>**NOTE**\r\n>Some key-value db use set instead of put to set value, so if like set(),\r\n>you could use set() to save value.\r\n\r\n### Write in a batch\r\nIf you want to do a sequence of update and want to make it atomically,\r\nthen writebatch will be your friend.\r\n\r\n>The WriteBatch holds a sequence of edits to be made to the database, \r\n>and these edits within the batch are applied in order.\r\n>\r\n>Apart from its atomicity benefits, WriteBatch may also be used to speed up\r\n>bulk updates by placing lots of individual mutations into the same batch.\r\n\r\n````php\r\n<?php\r\n\r\n$db = new LevelDB(\"/path/to/leveldb-test-db\");\r\n\r\n$batch = new LevelDBWriteBatch();\r\n$batch->put(\"key2\", \"batch value\");\r\n$batch->put(\"key3\", \"batch value\");\r\n$batch->set(\"key4\", \"a bounch of values\"); // set() is an alias of put()\r\n$batch->delete(\"some key\");\r\n\r\n// Write once\r\n$db->write($batch);\r\n````\r\n\r\n### Iterate throught db\r\n\r\nYou can iterate through the whole database by iteration:\r\n\r\n````php\r\n<?php\r\n\r\n$db = new LevelDB(\"/path/to/leveldb-test-db\");\r\n$it = new LevelDBIterator($db);\r\n\r\n// Loop in iterator style\r\nwhile($it->valid()) {\r\n\tvar_dump($it->key() . \" => \" . $it->current() . \"\\n\");\r\n}\r\n\r\n// Or loop in foreach\r\nforeach($it as $key => $value) {\r\n\techo \"{$key} => {$value}\\n\";\r\n}\r\n````\r\n\r\nif you want to iterate by reverse order, you could:\r\n\r\n````php\r\n<?php\r\n\r\n$db = new LevelDB(\"/path/to/leveldb-test-db\");\r\n$it = new LevelDBIterator($db);\r\n\r\nfor($it->last(); $it->valid(); $it->prev()) {\r\n\techo \"{$key} => {$value}\\n\";\r\n}\r\n\r\n/*\r\n * And you could seek with: rewind(), next(), prev(), seek()\r\n */\r\n````\r\n\r\n>**NOTE** In LevelDB LevelDB::seek() will success even when the key didn't exists,\r\n>it will seek to the latest key:\r\n>`db-with-key('a', 'b', 'd', 'e');  $db->seek('c');` iterator will point to `key 'd'`\r\n\r\n## Operations on database\r\n\r\n### LevelDB::close()\r\nSince leveldb can only accessed by a single proccess once, so you may want to\r\nclose it when you don't use it anymore.\r\n\r\n````php\r\n<?php\r\n\r\n$db = new LevelDB(\"/path/to/leveldb-test-db\");\r\n$it = new LevelDBIterator($db);\r\n$db->close();\r\n$it->next();\t\t\t\t// noop you can't do that, exception thrown\r\n$db->set(\"key\", \"value\");\t// you can't do this either\r\n````\r\n\r\nafter database closed, you can't do anything related to it;\r\n\r\n### LevelDB::destroy()\r\nIf you want to destroy a database, you could delete the whole database by hand:\r\n`rm -rf /path/to/db` or you could use `LevelDB::destroy('/path/to/db')`.\r\n\r\nBe careful with this.\r\n\r\n### LevelDB::repair()\r\nIf you can't open a database, neither been locked or other error, if it's corrupted,\r\nyou could use `LevelDB::repair('/path/to/db')` to repair it. it will try to recover\r\nas much data as possible.\r\n\r\n## Reference\r\nMore info could be found at:\r\n\r\n- LevelDB project home: <http://code.google.com/p/leveldb/>\r\n- LevelDB document: <http://leveldb.googlecode.com/git/doc/index.html>\r\n- A LevelDB internals analysis in Chinese <http://dirlt.com/LevelDB.html> 推荐关注博主的博客\r\n\r\n## License\r\nPHP-LevelDB is licensed under PHP License\r\n","google":""}